// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PolyclinicInfrastructure.Persistence;

#nullable disable

namespace PolyclinicInfrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251022053111_DeleteNavigationPropertyEmergencyRoomFromPatiente")]
    partial class DeleteNavigationPropertyEmergencyRoomFromPatiente
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PolyclinicDomain.Entities.ConsultationDerivation", b =>
                {
                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentToId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTimeDer")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateTimeCDer")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DepartmentFromId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BossId")
                        .HasColumnType("uuid");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("DoctorId", "DepartmentToId", "PatientId", "DateTimeDer", "DateTimeCDer", "DepartmentFromId");

                    b.HasIndex("BossId");

                    b.HasIndex("DepartmentFromId");

                    b.HasIndex("DepartmentToId");

                    b.HasIndex("PatientId");

                    b.ToTable("Consultation Derivation", (string)null);
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.ConsultationReferral", b =>
                {
                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExternalMedicalPostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTimeRem")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateTimeCRem")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DepartmentToId")
                        .HasColumnType("uuid");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("BossId")
                        .HasColumnType("uuid");

                    b.HasKey("DoctorId", "ExternalMedicalPostId", "PatientId", "DateTimeRem", "DateTimeCRem", "DepartmentToId", "Diagnosis");

                    b.HasIndex("BossId");

                    b.HasIndex("DepartmentToId");

                    b.HasIndex("ExternalMedicalPostId");

                    b.HasIndex("PatientId");

                    b.ToTable("Consultation Referral", (string)null);
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BossId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("BossId")
                        .IsUnique();

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Derivation", b =>
                {
                    b.Property<Guid>("DepartmentFromId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTimeDer")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartmentToId")
                        .HasColumnType("uuid");

                    b.HasKey("DepartmentFromId", "PatientId", "DateTimeDer");

                    b.HasIndex("DepartmentToId");

                    b.HasIndex("PatientId");

                    b.ToTable("Derivation", (string)null);
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.EmergencyRoom", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("GuardDate")
                        .HasColumnType("date");

                    b.HasKey("DoctorId", "GuardDate");

                    b.ToTable("EmergencyRoom", (string)null);
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.EmergencyRoomCare", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CareDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("GuardDate")
                        .HasColumnType("date");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("DoctorId", "PatientId", "CareDate", "GuardDate");

                    b.HasIndex("PatientId");

                    b.HasIndex("DoctorId", "GuardDate");

                    b.ToTable("EmergencyRoomCare", (string)null);
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EmploymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Employee", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.ExternalMedicalPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("ExternalMedicalPost", (string)null);
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Medication", b =>
                {
                    b.Property<Guid>("IdMed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CommercialCompany")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("CommercialName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("QuantityA")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityNurse")
                        .HasColumnType("integer");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("IdMed");

                    b.ToTable("Medications", t =>
                        {
                            t.HasCheckConstraint("CK_Medicine_Quantities_NonNegative", "\"QuantityA\" >= 0 AND \"QuantityNurse\" >= 0");
                        });
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.MedicationRequest", b =>
                {
                    b.Property<Guid>("MedicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("MedicationId", "DepartmentId", "RequestDate");

                    b.HasIndex("DepartmentId");

                    b.ToTable("MedicationRequest", (string)null);
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Nursing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BossId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("BossId");

                    b.ToTable("Nursing", (string)null);
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Patient", b =>
                {
                    b.Property<Guid>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("PatientId");

                    b.HasIndex("Contact")
                        .IsUnique();

                    b.ToTable("Patient", null, t =>
                        {
                            t.HasCheckConstraint("CK_Patient_Age", "\"Age\" >= 0 AND \"Age\" < 130");
                        });
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Referral", b =>
                {
                    b.Property<Guid>("ExternalMedicalPostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTimeRem")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartmentToId")
                        .HasColumnType("uuid");

                    b.HasKey("ExternalMedicalPostId", "PatientId", "DateTimeRem");

                    b.HasIndex("DepartmentToId");

                    b.HasIndex("PatientId");

                    b.ToTable("Referral", (string)null);
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Email");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BossId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("BossId")
                        .IsUnique();

                    b.ToTable("Warehouse", (string)null);
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.WarehouseRequest", b =>
                {
                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("BossId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("WarehouseId", "DepartmentId", "RequestDate");

                    b.HasIndex("BossId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("WarehouseRequest", (string)null);
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Boss", b =>
                {
                    b.HasBaseType("PolyclinicDomain.Entities.Employee");

                    b.ToTable("Boss", (string)null);
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.MedicalStaff", b =>
                {
                    b.HasBaseType("PolyclinicDomain.Entities.Employee");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.HasIndex("DepartmentId");

                    b.ToTable("MedicalStaff", (string)null);
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Nurse", b =>
                {
                    b.HasBaseType("PolyclinicDomain.Entities.Employee");

                    b.Property<Guid>("NursingId")
                        .HasColumnType("uuid");

                    b.HasIndex("NursingId");

                    b.ToTable("Nurse", (string)null);
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Doctor", b =>
                {
                    b.HasBaseType("PolyclinicDomain.Entities.MedicalStaff");

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.ConsultationDerivation", b =>
                {
                    b.HasOne("PolyclinicDomain.Entities.Boss", "Boss")
                        .WithMany()
                        .HasForeignKey("BossId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.Department", "DepartmentFrom")
                        .WithMany()
                        .HasForeignKey("DepartmentFromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.Department", "DepartmentTo")
                        .WithMany()
                        .HasForeignKey("DepartmentToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.Patient", "Patient")
                        .WithMany("ConsultationDerivations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Boss");

                    b.Navigation("DepartmentFrom");

                    b.Navigation("DepartmentTo");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.ConsultationReferral", b =>
                {
                    b.HasOne("PolyclinicDomain.Entities.Boss", "Boss")
                        .WithMany()
                        .HasForeignKey("BossId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.Department", "DepartmentTo")
                        .WithMany()
                        .HasForeignKey("DepartmentToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.ExternalMedicalPost", "ExternalMedicalPost")
                        .WithMany()
                        .HasForeignKey("ExternalMedicalPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.Patient", "Patient")
                        .WithMany("ConsultationReferrals")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Boss");

                    b.Navigation("DepartmentTo");

                    b.Navigation("Doctor");

                    b.Navigation("ExternalMedicalPost");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Department", b =>
                {
                    b.HasOne("PolyclinicDomain.Entities.Boss", "Boss")
                        .WithOne()
                        .HasForeignKey("PolyclinicDomain.Entities.Department", "BossId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Boss");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Derivation", b =>
                {
                    b.HasOne("PolyclinicDomain.Entities.Department", "DepartmentFrom")
                        .WithMany()
                        .HasForeignKey("DepartmentFromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.Department", "DepartmentTo")
                        .WithMany()
                        .HasForeignKey("DepartmentToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.Patient", "Patient")
                        .WithMany("Derivations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DepartmentFrom");

                    b.Navigation("DepartmentTo");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.EmergencyRoom", b =>
                {
                    b.HasOne("PolyclinicDomain.Entities.Doctor", "Doctor")
                        .WithMany("EmergencyRooms")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.EmergencyRoomCare", b =>
                {
                    b.HasOne("PolyclinicDomain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.EmergencyRoom", "EmergencyRoom")
                        .WithMany()
                        .HasForeignKey("DoctorId", "GuardDate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("EmergencyRoom");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.MedicationRequest", b =>
                {
                    b.HasOne("PolyclinicDomain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Nursing", b =>
                {
                    b.HasOne("PolyclinicDomain.Entities.Boss", "Boss")
                        .WithMany()
                        .HasForeignKey("BossId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Boss");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Referral", b =>
                {
                    b.HasOne("PolyclinicDomain.Entities.Department", "DepartmentTo")
                        .WithMany()
                        .HasForeignKey("DepartmentToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.ExternalMedicalPost", "ExternalMedicalPost")
                        .WithMany()
                        .HasForeignKey("ExternalMedicalPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.Patient", "Patient")
                        .WithMany("Referrals")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DepartmentTo");

                    b.Navigation("ExternalMedicalPost");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Warehouse", b =>
                {
                    b.HasOne("PolyclinicDomain.Entities.Boss", "Boss")
                        .WithOne()
                        .HasForeignKey("PolyclinicDomain.Entities.Warehouse", "BossId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Boss");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.WarehouseRequest", b =>
                {
                    b.HasOne("PolyclinicDomain.Entities.Boss", "Boss")
                        .WithMany()
                        .HasForeignKey("BossId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Boss");

                    b.Navigation("Department");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Boss", b =>
                {
                    b.HasOne("PolyclinicDomain.Entities.Employee", null)
                        .WithOne()
                        .HasForeignKey("PolyclinicDomain.Entities.Boss", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.MedicalStaff", b =>
                {
                    b.HasOne("PolyclinicDomain.Entities.Department", "Department")
                        .WithMany("MedicalStaff")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.Employee", null)
                        .WithOne()
                        .HasForeignKey("PolyclinicDomain.Entities.MedicalStaff", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Nurse", b =>
                {
                    b.HasOne("PolyclinicDomain.Entities.Employee", null)
                        .WithOne()
                        .HasForeignKey("PolyclinicDomain.Entities.Nurse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.Nursing", "Nursing")
                        .WithMany("Nurses")
                        .HasForeignKey("NursingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Nursing");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Doctor", b =>
                {
                    b.HasOne("PolyclinicDomain.Entities.MedicalStaff", null)
                        .WithOne()
                        .HasForeignKey("PolyclinicDomain.Entities.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Department", b =>
                {
                    b.Navigation("MedicalStaff");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Nursing", b =>
                {
                    b.Navigation("Nurses");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Patient", b =>
                {
                    b.Navigation("ConsultationDerivations");

                    b.Navigation("ConsultationReferrals");

                    b.Navigation("Derivations");

                    b.Navigation("Referrals");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Doctor", b =>
                {
                    b.Navigation("EmergencyRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
