// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PolyclinicInfrastructure.Persistence;

#nullable disable

namespace PolyclinicInfrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251019062822_InheritanceSettings")]
    partial class InheritanceSettings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PolyclinicDomain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("EmploymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasDiscriminator().HasValue("Employee");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.ExternalMedicalPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("ExternalMedicalPosts");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Nursing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BossId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("BossId")
                        .IsUnique();

                    b.ToTable("Nursing");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BossId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("BossId")
                        .IsUnique();

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Nurse", b =>
                {
                    b.HasBaseType("PolyclinicDomain.Entities.Employee");

                    b.Property<Guid?>("NursingId")
                        .HasColumnType("uuid");

                    b.HasIndex("NursingId");

                    b.HasDiscriminator().HasValue("Nurse");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Nursing", b =>
                {
                    b.HasOne("PolyclinicDomain.Entities.Employee", "Boss")
                        .WithOne()
                        .HasForeignKey("PolyclinicDomain.Entities.Nursing", "BossId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Boss");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Warehouse", b =>
                {
                    b.HasOne("PolyclinicDomain.Entities.Employee", "Boss")
                        .WithOne()
                        .HasForeignKey("PolyclinicDomain.Entities.Warehouse", "BossId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Boss");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Nurse", b =>
                {
                    b.HasOne("PolyclinicDomain.Entities.Employee", null)
                        .WithOne()
                        .HasForeignKey("PolyclinicDomain.Entities.Nurse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PolyclinicDomain.Entities.Nursing", "Nursing")
                        .WithMany("Nurses")
                        .HasForeignKey("NursingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Nursing");
                });

            modelBuilder.Entity("PolyclinicDomain.Entities.Nursing", b =>
                {
                    b.Navigation("Nurses");
                });
#pragma warning restore 612, 618
        }
    }
}
